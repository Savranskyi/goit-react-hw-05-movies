{"version":3,"file":"static/js/686.8070f8aa.chunk.js","mappings":"2PAGMA,EAAiB,SAAC,GAAqC,IAAD,IAAnCC,WAAaC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1C,OACI,2BACI,wBAAKD,KACL,uBAAIC,QAKhBH,EAAeI,UAAY,CACvBH,WAAYI,IAAAA,MAAe,CACvBH,OAAQG,IAAAA,OAAAA,WACRF,QAASE,IAAAA,OAAAA,cAIjB,Q,UCyBA,EA7BgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAmCE,EAAAA,EAAAA,UAAS,IAA5C,eAAOC,EAAP,KAAmBC,EAAnB,KAYA,OAVAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,GAAiBC,EAAAA,EAAAA,IAAe,QAAD,UAAaP,GAAW,WACzDM,GACFA,EAAeE,MAAK,SAAAC,GACbA,GACLL,EAAaK,EAAMC,KAAKC,cAG3B,CAACX,KAGF,SAACY,EAAA,EAAD,WACE,wBACyB,IAAtBT,EAAWU,OACRV,EAAWW,KAAI,SAAAnB,GACb,OACE,SAAC,EAAD,CAAgBA,WAAYA,GAAiBA,EAAWoB,OAtBrD,iD,qDCXbH,EAAU,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SACjB,OAAO,6BAAUA,KAGnBJ,EAAQd,UAAY,CAClBkB,SAAUC,IAAAA,KAAAA,YAGZ","sources":["components/ReviewsDetails/ReviewsDetails.jsx","components/Reviews/Reviews.jsx","components/Section/Section.jsx"],"sourcesContent":["//React\nimport PropType from 'prop-types';\n\nconst ReviewsDetails = ({reviewItem: {author, content}}) => { \n    return (\n        <li>\n            <h1>{author}</h1>\n            <p>{content}</p>\n        </li>\n    );\n};\n\nReviewsDetails.protoType = {\n    reviewItem: PropType.shape({\n        author: PropType.string.isRequired,\n        content: PropType.string.isRequired\n    })\n};\n\nexport default ReviewsDetails;","//React\n//import { useOutletContext } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\n//Component\nimport Section from 'components/Section/Section.jsx';\nimport ReviewsDetails from 'components/ReviewsDetails/ReviewsDetails.jsx';\n//API\nimport { tmdbMovieIdAPI } from 'services/tmdbAPI';\n//Dynamic\n//const ReviewsDetails = lazy(() => { import('../ReviewsDetails') });\n\nconst REVIEW_NOT = 'We don`t have any reviews for this movie';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviewtObj, setReviewObj] = useState([]);\n\n  useEffect(() => {\n    const reviewsPromise = tmdbMovieIdAPI('movie', `${movieId}`, 'reviews');\n    if (reviewsPromise) {\n      reviewsPromise.then(value => {\n        if (!value) return;\n        setReviewObj(value.data.results);\n      });\n    }\n  }, [movieId]);\n\n  return (\n    <Section>\n      <ul>\n        {reviewtObj.length !== 0\n          ? reviewtObj.map(reviewItem => {\n              return (\n                <ReviewsDetails reviewItem={reviewItem} key={reviewItem.id} />\n              );\n            })\n          : REVIEW_NOT}\n      </ul>\n    </Section>\n  );\n};\n\nexport default Reviews;\n","import PropTypes from 'prop-types';\n\nconst Section = ({ children }) => {\n  return <section>{children}</section>;\n};\n\nSection.protoType = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n"],"names":["ReviewsDetails","reviewItem","author","content","protoType","PropType","movieId","useParams","useState","reviewtObj","setReviewObj","useEffect","reviewsPromise","tmdbMovieIdAPI","then","value","data","results","Section","length","map","id","children","PropTypes"],"sourceRoot":""}